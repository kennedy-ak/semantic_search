# Semantic Search

Semantic Search is an application that leverages vector embeddings and graph databases to provide advanced search capabilities beyond traditional keyword-based methods. It integrates Neo4j AuraDB for graph storage, MongoDB for document storage, and Groq for embedding generation.

---

## Table of Contents

- [Overview](#overview)
- [Features](#features)
- [Architecture](#architecture)
- [Screenshots & Images](#screenshots--images)
- [Getting Started](#getting-started)
- [Configuration](#configuration)
- [Usage](#usage)
- [Contributing](#contributing)
- [Links](#links)
- [License](#license)

---

## Overview

This project enables semantic search by embedding documents and queries into a vector space, storing relationships in Neo4j, and supporting fast, meaningful search results. It is suitable for applications like knowledge bases, recommendation systems, and intelligent document retrieval.

---

## Features

- **Semantic Embedding:** Uses Groq API to generate vector embeddings for documents and queries.
- **Graph Storage:** Utilizes Neo4j AuraDB to store and query relationships between entities.
- **Document Storage:** Stores raw documents and metadata in MongoDB.
- **Fast Search:** Supports similarity search using vector operations.
- **Scalable:** Designed to work with cloud-hosted databases.

---

## Architecture

```mermaid
graph TD
    A[User Query] --> B[Embedding Model (Groq)]
    B --> C[Vector Representation]
    C --> D[Neo4j AuraDB]
    C --> E[MongoDB]
    D --> F[Semantic Search Results]
    E --> F
```

---

## Screenshots & Images

> _Add screenshots or architecture diagrams here. For example:_

![Semantic Search UI](image.png)


---

## Getting Started

### Prerequisites

- Python 3.8+
- [Neo4j AuraDB account](https://neo4j.com/cloud/aura/)
- [Groq API key](https://groq.com/)

### Installation

1. **Clone the repository:**
    ```sh
    git clone https://github.com/yourusername/semantic_search.git
    cd semantic_search
    ```

2. **Install dependencies:**
    ```sh
    pip install -r requirements.txt
    ```

3. **Configure environment variables:**
    - Copy `.env.example` to `.env` and fill in your credentials.

---

## Configuration

The application uses a `.env` file for sensitive configuration:

```env
NEO4J_URI=neo4j+s://<your-neo4j-uri>
NEO4J_USER=neo4j
NEO4J_PASSWORD=<your-password>



```

---

## Usage

1. **Start the application:**
    ```sh
    python main.py
    ```

2. **Interact with the API or UI as described in the documentation.**

---

## Contributing

Contributions are welcome! Please:

- Fork the repository
- Create a new branch for your feature or bugfix
- Submit a pull request with a clear description

---

## Links

- [Live Demo](#) <!-- Replace with actual link -->
- [Documentation](#) <!-- Replace with actual link -->
- [Issue Tracker](#) <!-- Replace with actual link -->

---

## License

This project is licensed under the